{"version":3,"file":"index.js","sources":["../src/prepare_data.js","../src/pie.js","../src/cli.js","../rollup.frontend.js","../index.js"],"sourcesContent":["import * as path from \"path\";\r\nimport * as fs from \"fs\";\r\n\r\n/**\r\n * Reads the provided txt files and construcs a forest object of the following form:\r\n *  {\r\n *      strength: float,\r\n *      correlationMatrix: [[float]],\r\n *      trees: [{\r\n *          strength: float,\r\n *          nodes: [\r\n *              [int, int, int, int, int]  // correspond to height, samples, impurity, impurityDrop, feature\r\n *          ]\r\n *      }]\r\n *  }\r\n *\r\n * @param {string} summaryFile - Path to the overall summary file\r\n * @param {string} statisticsDirectory - Path to the directory containing the tree statistics files\r\n * @returns {Object}\r\n */\r\nexport default function createForest(summaryFile, statisticsDirectory) {\r\n    const summary = fs.readFileSync(summaryFile, 'utf-8');\r\n    const summaryParts = summary.split('\\n\\n');\r\n\r\n    const totalStrength = Number.parseFloat(summaryParts[0]);\r\n    const correlationMatrix = parseCorrelationMatrix(summaryParts[2]);\r\n\r\n    const treeFiles = fs.readdirSync(statisticsDirectory);\r\n    const treeStrengths = summaryParts[1].split('\\n').map(Number.parseFloat);\r\n\r\n    // Sanity check\r\n    if (treeFiles.length !== treeStrengths.length) {\r\n        console.log(treeFiles, treeStrengths);\r\n        console.log(treeFiles.length, treeStrengths.length);\r\n        throw `Number of trees noted in ${summaryFile} (${treeFiles.length}) is inconsistend ` +\r\n        `to the amount of files in ${statisticsDirectory} (${treeStrengths.length})`;\r\n    }\r\n\r\n    const trees = treeFiles.map((treeFile, index) => {\r\n        const treeFilePath = path.resolve(statisticsDirectory, treeFile);\r\n        const content = fs.readFileSync(treeFilePath, 'utf-8');\r\n        const nodes = parseStatisticsContent(content);\r\n        return {\r\n            strength: treeStrengths[index],\r\n            baseNode: transformNodes(nodes)\r\n        }\r\n    });\r\n\r\n    return {\r\n        strength: totalStrength,\r\n        totalSamples: trees[0].baseNode.samples,\r\n        correlationMatrix: correlationMatrix,\r\n        trees: trees\r\n    }\r\n}\r\n\r\n/**\r\n * Parses a given correlation matrix text to a two-dimensional array of floats\r\n * @param {string} text - correlation matrix text\r\n * @returns {number[][]}\r\n */\r\nfunction parseCorrelationMatrix(text) {\r\n    text = text.replace(/\\[|\\]/g, '');  // Remove [] brackets from string\r\n    return text.split(';\\n').map(line =>\r\n        line.split(',').map(Number.parseFloat)\r\n    );\r\n}\r\n\r\n/**\r\n * Parses a given tree statistics text file content into an internal tuple representation\r\n * @param {string} text - tree statistics text\r\n * @returns {number[][]}\r\n */\r\nfunction parseStatisticsContent(text) {\r\n    return text.trim().split('\\n').map(line => {\r\n        const fields = line.split(';');\r\n        return [\r\n            Number.parseInt(fields[0]),  // height\r\n            Number.parseInt(fields[1]),  // samples\r\n            Number.parseFloat(fields[2]),  // impurity\r\n            Number.parseFloat(fields[9]),  // impurityDrop\r\n            Number.parseInt(fields[3]),  // feature\r\n        ]\r\n    });\r\n}\r\n\r\n/**\r\n * Internal tree data structure\r\n * The methods branchify() and toBranch() are just messy workarounds and should be refactored at some point\r\n */\r\nclass TreeNode {\r\n    constructor(height, samples, impurity, impurityDrop, feature, children = []) {\r\n        this.height = height;\r\n        this.samples = samples;\r\n        this.impurity = impurity;\r\n        this.impurityDrop = impurityDrop;\r\n        this.feature = feature;\r\n        this.children = children;\r\n    }\r\n\r\n    /** Adds a child node */\r\n    add(node) {\r\n        if(this.children.length >= 2) throw `Node ${this} already has two children`;\r\n        this.children.push(node);\r\n    }\r\n}\r\n\r\n/**\r\n * Messy function for transforming the list of node parameters to an actual tree data structure\r\n * @param {*} tree\r\n */\r\nfunction transformNodes(nodes) {\r\n    const baseNode = new TreeNode(...nodes[0]);\r\n    let stack = [baseNode];\r\n\r\n    for (let nodeParameters of nodes.slice(1)) {\r\n        let latest = stack[stack.length - 1];\r\n        const node = new TreeNode(...nodeParameters);\r\n\r\n        if (node.height === latest.height + 1) {  // Child Node\r\n            // Do nothing\r\n        } else if (node.height === latest.height) {  // Sibling Node\r\n            stack.pop();\r\n        } else if (node.height < latest.height) {\r\n            stack = stack.slice(0, node.height)\r\n        } else {\r\n            throw \"No no no no no\"\r\n        }\r\n\r\n        latest = stack[stack.length - 1];\r\n        latest.add(node);\r\n        stack.push(node);\r\n    }\r\n\r\n    return baseNode;\r\n}","import * as d3 from \"d3\";\r\nimport {component} from \"d3-component\";\r\n\r\nexport {drawPie};\r\n\r\nconst colorScale = d3.scaleLinear()\r\n    .domain([0, 1])\r\n    .range([\"green\", \"red\"]);\r\n\r\nconst arc = d3.arc().innerRadius(0);\r\nconst slice = component(\"path\")\r\n    .render((selection, slice) => {\r\n        selection\r\n            .attr(\"d\", arc(slice))\r\n            .attr(\"fill\", colorScale(slice.data.impurity))\r\n            .attr(\"stroke\", \"#fff\")\r\n            .attr(\"stroke-width\", 0.5)\r\n            .attr(\"stroke-linejoin\", \"round\");\r\n    });\r\nconst pie = component(\"g\")\r\n    .render((selection, {\r\n        radius,\r\n        slices,\r\n    }) => {\r\n        const d3Slices = d3.pie()\r\n            .value(d => d.value)\r\n            .sort((a, b) => a.impurity.localeCompare(b.impurity))\r\n            (slices);\r\n        arc.outerRadius(radius);\r\n        selection\r\n            .call(slice, d3Slices);\r\n    });\r\n\r\nfunction drawPie(svg, x, y, radius, slices) {\r\n    svg.append(\"g\")\r\n        .attr(\"transform\", `translate(${x}, ${y})`)\r\n        .call(pie, {slices}, {\r\n            radius: radius\r\n        });\r\n}\r\n","import D3Node from \"d3-node\";\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\nimport * as util from \"util\";\r\n//import svg2png from \"svg2png\";\r\nimport {drawTree} from \"./draw_tree.js\";\r\nimport createForest from \"./prepare_data.js\";\r\nconst fs_writeFile = util.promisify(fs.writeFile);\r\n\r\nexport default function writeSvgs(dataFolder) {\r\n    const d3n = new D3Node({\r\n        selector: \"#chart\",\r\n        styles: \"#chart svg {background: #fff}\",\r\n        container: `<div id=\"chart\"></div>`\r\n    });\r\n\r\n    const statisticsDir = path.join(dataFolder, 'statistics');\r\n    const summaryFile = path.join(dataFolder, 'summary.txt');\r\n\r\n    const forest = createForest(summaryFile, statisticsDir);\r\n\r\n    const _margin = { top: 0, right: 0, bottom: 0, left: 0 };\r\n    const width = 1000 - _margin.left - _margin.right;\r\n    const height = 800 - _margin.top - _margin.bottom;\r\n    const svg = d3n.createSVG(width, height)\r\n        .append(\"g\")\r\n        .attr(\"transform\", `translate(${_margin.left}, ${_margin.top})`);\r\n\r\n    drawTree({\r\n        svg: svg,\r\n        tree: forest.trees[0],\r\n        totalSamples: forest.totalSamples\r\n    });\r\n\r\n    // create output files\r\n    output(\"./output\", d3n);\r\n}\r\n\r\nfunction output(outputName, d3n) {\r\n\r\n    fs.writeFile(outputName+\".html\", d3n.html(), function () {\r\n        console.log(\">> Exported \\\"\"+outputName+\".html\\\"\");\r\n    });\r\n\r\n    fs.writeFile(outputName+\".svg\", d3n.html(), function () {\r\n        console.log(\">> Exported \\\"\"+outputName+\".html\\\"\");\r\n    });\r\n\r\n    const svgBuffer = new Buffer(d3n.svgString(), \"utf-8\");/*\r\n    svg2png(svgBuffer)\r\n        .then(buffer => fs_writeFile(outputName+\".png\", buffer))\r\n        .catch(err => console.error(err))\r\n        .then(() => console.log(\">> Exported: \\\"\"+outputName+\".png\\\"\"));*/\r\n}","import resolve from 'rollup-plugin-node-resolve';\r\nimport commonjs from 'rollup-plugin-commonjs';\r\nimport sass from 'rollup-plugin-scss';\r\n\r\nexport default {\r\n    input: './src/main.js',\r\n    output: {\r\n        file: './dist/public/js/main.js',\r\n        format: 'iife',\r\n        sourcemap: true\r\n    },\r\n    plugins: [\r\n        resolve(),\r\n        commonjs(),\r\n        sass({\r\n            output: './dist/public/css/style.css'\r\n        })\r\n    ]\r\n};","import yargs from \"yargs\";\r\nimport express from \"express\";\r\nimport createForest from \"./src/prepare_data.js\";\r\nimport writeSvgs from \"./src/cli.js\";\r\nimport rollup from \"rollup\";\r\nimport rollupOptions from \"./rollup.frontend.js\";\r\nimport * as path from \"path\";\r\n\r\nasync function runGui(args) {\r\n    //await rollup.rollup(rollupOptions);  // TODO this is a build step!\r\n    const {statisticsDir, summaryFile} = readData(args);\r\n    const app = express();\r\n    console.log(\"Starting server\");\r\n    app.get('/',     (req, res) => res.sendFile(path.join(path.resolve() + '/index.html')));\r\n    app.get('/data', (req, res) => res.json(createForest(summaryFile, statisticsDir)));\r\n    app.use(express.static('public'));\r\n    app.listen(3000, () => console.log('GUI running at http://localhost:3000'));\r\n}\r\n\r\nasync function runCli(args) {\r\n//    writeSvgs(data);\r\n}\r\n\r\nfunction readData({data}) {\r\n    const statisticsDir = path.join(path.resolve(data), 'statistics');\r\n    const summaryFile = path.join(path.resolve(data), 'summary.txt');\r\n    return {statisticsDir, summaryFile};\r\n}\r\n\r\nconst argv = yargs\r\n    .command(\r\n        'cli <data>',\r\n        'Command line interface to generate SVGs',\r\n        yargs => yargs\r\n            .positional('data', {\r\n                describe: 'Folder containing the forest data'\r\n            })\r\n            .options({\r\n                \"width\": {\r\n                    alias: \"w\",\r\n                    describe: \"Width of the SVG\",\r\n                    default: 800,\r\n                    number: true,\r\n                },\r\n                \"height\": {\r\n                    alias: \"h\",\r\n                    describe: \"Height of the SVG\",\r\n                    default: 800,\r\n                    number: true,\r\n                },\r\n                \"depth\": {\r\n                    alias: \"d\",\r\n                    describe: \"Maximal depth of the tree rendering. Cut of leaves are visualized via consolidation nodes.\",\r\n                    number: true,\r\n                },\r\n                \"leaf-color\": {\r\n                    describe: \"Color of the leaves. Either the leaf impurity or the class assigned to the leaf.\",\r\n                    choices: [\"impurity\", \"class\"],\r\n                    default: \"impurity\",\r\n                },\r\n                \"leaf-impurity-threshold\": {\r\n                    describe: \"Between 0 and 1. By default the impurity is mapped from 0 to 1 on a linear color gradient between red and green. If you set this flag, everything below the provided threshold is visualized red and the gradient will be linear between <threshold> and 1\",\r\n                    implies: \"leaf-color\",\r\n                    default: 0,\r\n                    number: true,\r\n                },\r\n                \"branch-color\": {\r\n                    describe: \"Color of the branches. Either the node's impurity or the node's drop-of-impurity.\",\r\n                    choices: [\"impurity\", \"impurity-drop\"],\r\n                    default: \"impurity\",\r\n                },\r\n                /*\r\n                \"branch-impurity-threshold\": {\r\n                    describe: \"program specifications\",\r\n                    implies: \"branch-color\",\r\n                    default: 0,\r\n                    number: true,\r\n                }*/\r\n                // TODO threshold for impurity drop?\r\n            }),\r\n        function (argv) {\r\n            console.log(argv)\r\n        }\r\n    )\r\n    .command(\r\n        \"gui <data>\",\r\n        \"Graphical User Interface\",\r\n        yargs => yargs\r\n            .positional('data', {\r\n                describe: 'Folder containing the forest data'\r\n            }),\r\n        runGui\r\n    )\r\n    .help(\"help\")\r\n    .version(\"0.1.0\")\r\n    .argv;\r\n"],"names":["fs.readFileSync","fs.readdirSync","path.resolve","d3.scaleLinear","d3.arc","component","d3.pie","util.promisify","fs.writeFile","path.join","yargs"],"mappings":"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"}